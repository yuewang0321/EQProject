{"ast":null,"code":"var _jsxFileName = \"/Users/yuewang/Desktop/Job/new/EQProject/frontend/src/components/DailyStats.js\";\nimport React, { Component } from 'react';\nimport API from '../API/api.js';\nimport '../css/Stats.css';\nimport { MDBDataTable } from 'mdbreact';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Label } from 'recharts';\nconst apiCall = new API();\n\nvar moment = require('moment');\n\nclass DailyStats extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stats: null,\n      limitReached: false\n    };\n  }\n\n  componentDidMount() {\n    apiCall.getDailyStats().then(response => {\n      if (typeof response !== 'undefined') {\n        this.setState({\n          stats: response\n        });\n      } else {\n        this.setState({\n          limitReached: true\n        });\n      }\n    });\n  }\n\n  render() {\n    var {\n      stats,\n      limitReached\n    } = this.state;\n    const data = {\n      columns: [{\n        label: 'Clicks',\n        field: 'clicks',\n        sort: 'asc',\n        width: 500\n      }, {\n        label: 'Date',\n        field: 'date',\n        sort: 'asc',\n        width: 270\n      }, {\n        label: 'Impressions',\n        field: 'impressions',\n        sort: 'asc',\n        width: 200\n      }, {\n        label: 'Revenue',\n        field: 'revenue',\n        sort: 'asc',\n        width: 200\n      }],\n      rows: stats\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, !limitReached ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 34\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"LineGraph\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 29\n      }\n    }, \"Hourly Stats\"), /*#__PURE__*/React.createElement(LineChart, {\n      width: 600,\n      height: 200,\n      data: stats,\n      margin: {\n        top: 10,\n        right: 30,\n        left: 20,\n        bottom: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"date\",\n      tickFormatter: timeStr => moment(timeStr).format('MM/DD'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      style: {\n        textAnchor: 'middle'\n      },\n      dy: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 33\n      }\n    }, \"Date\")), /*#__PURE__*/React.createElement(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      angle: 270,\n      style: {\n        textAnchor: 'middle'\n      },\n      dx: -30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 33\n      }\n    }, \"Clicks\")), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Line, {\n      connectNulls: true,\n      type: \"monotone\",\n      dataKey: \"clicks\",\n      stroke: \"#8884d8\",\n      fill: \"#8884d8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(LineChart, {\n      width: 600,\n      height: 300,\n      data: stats,\n      margin: {\n        top: 10,\n        right: 30,\n        left: 20,\n        bottom: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"date\",\n      tickFormatter: timeStr => moment(timeStr).format('MM/DD'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      style: {\n        textAnchor: 'middle'\n      },\n      dy: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 33\n      }\n    }, \"Date\")), /*#__PURE__*/React.createElement(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      angle: 270,\n      style: {\n        textAnchor: 'middle'\n      },\n      dx: -40,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 33\n      }\n    }, \"Impressions\")), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Line, {\n      connectNulls: true,\n      type: \"monotone\",\n      dataKey: \"impressions\",\n      stroke: \"#8884d8\",\n      fill: \"#8884d8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(LineChart, {\n      width: 600,\n      height: 200,\n      data: stats,\n      margin: {\n        top: 10,\n        right: 30,\n        left: 20,\n        bottom: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"date\",\n      tickFormatter: timeStr => moment(timeStr).format('MM/DD'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      style: {\n        textAnchor: 'middle'\n      },\n      dy: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 33\n      }\n    }, \"Date\")), /*#__PURE__*/React.createElement(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      angle: 270,\n      style: {\n        textAnchor: 'middle'\n      },\n      dx: -30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 33\n      }\n    }, \"Revenue\")), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Line, {\n      connectNulls: true,\n      type: \"monotone\",\n      dataKey: \"revenue\",\n      stroke: \"#8884d8\",\n      fill: \"#8884d8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"TableStats\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(MDBDataTable, {\n      striped: true,\n      bordered: true,\n      small: true,\n      data: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 29\n      }\n    })))) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, \"Daily Stats Call Limit Reached\"));\n  }\n\n}\n\nexport default DailyStats;","map":{"version":3,"sources":["/Users/yuewang/Desktop/Job/new/EQProject/frontend/src/components/DailyStats.js"],"names":["React","Component","API","MDBDataTable","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Label","apiCall","moment","require","DailyStats","constructor","props","state","stats","limitReached","componentDidMount","getDailyStats","then","response","setState","render","data","columns","label","field","sort","width","rows","top","right","left","bottom","timeStr","format","textAnchor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport API from '../API/api.js';\nimport '../css/Stats.css';\nimport { MDBDataTable } from 'mdbreact';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Label\n  } from 'recharts';\n\nconst apiCall = new API();\nvar moment = require('moment');\n\nclass DailyStats extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            stats:null,\n            limitReached:false\n        }\n    }\n    componentDidMount() {\n        apiCall.getDailyStats()\n        .then(response => {\n            if (typeof response!=='undefined'){\n                this.setState({stats: response});\n            }\n            else {\n                this.setState({limitReached: true});\n            }\n        })\n    }\n\n    render() {\n        var { stats, limitReached } = this.state;\n        const data = {\n            columns: [\n                {\n                    label: 'Clicks',\n                    field: 'clicks',\n                    sort: 'asc',\n                    width: 500\n                },\n                {\n                    label: 'Date',\n                    field: 'date',\n                    sort: 'asc',\n                    width: 270\n                },\n                {\n                    label: 'Impressions',\n                    field: 'impressions',\n                    sort: 'asc',\n                    width: 200\n                },\n                {\n                    label: 'Revenue',\n                    field: 'revenue',\n                    sort: 'asc',\n                    width: 200\n                }\n            ],\n            rows: stats\n        };\n        return(\n            <div>\n                {!limitReached ? <div>\n                    <div>\n                        <div className=\"LineGraph\">\n                            <h1>Hourly Stats</h1>\n                            <LineChart width={600} height={200} data={stats}\n                                margin={{top: 10, right: 30, left: 20, bottom: 20}}>\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\n                            <XAxis dataKey=\"date\" tickFormatter={timeStr => moment(timeStr).format('MM/DD')}>\n                                <Label style={{ textAnchor: 'middle' }} dy={10}>\n                                    Date\n                                </Label>\n                            </XAxis>\n                            <YAxis>\n                                <Label angle={270} style={{ textAnchor: 'middle' }} dx={-30}>\n                                    Clicks\n                                </Label>\n                            </YAxis>\n                            <Tooltip/>\n                            <Line connectNulls={true} type='monotone' dataKey='clicks' stroke='#8884d8' fill='#8884d8' />\n                            </LineChart>\n\n                            <LineChart width={600} height={300} data={stats}\n                                margin={{top: 10, right: 30, left: 20, bottom: 20}}>\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\n                            <XAxis dataKey=\"date\" tickFormatter={timeStr => moment(timeStr).format('MM/DD')}>\n                                <Label style={{ textAnchor: 'middle' }} dy={10} >\n                                    Date\n                                </Label>\n                            </XAxis>\n                            <YAxis>\n                                <Label angle={270} style={{ textAnchor: 'middle' }} dx={-40}>\n                                    Impressions\n                                </Label>\n                            </YAxis>\n                            <Tooltip/>\n                            <Line connectNulls={true} type='monotone' dataKey='impressions' stroke='#8884d8' fill='#8884d8' />\n                            </LineChart>\n\n                            <LineChart width={600} height={200} data={stats}\n                                margin={{top: 10, right: 30, left: 20, bottom: 20}}>\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\n                            <XAxis dataKey=\"date\" tickFormatter={timeStr => moment(timeStr).format('MM/DD')}>\n                                <Label style={{ textAnchor: 'middle' }} dy={10}>\n                                    Date\n                                </Label>\n                            </XAxis>\n                            <YAxis>\n                                <Label angle={270} style={{ textAnchor: 'middle' }} dx={-30}>\n                                    Revenue\n                                </Label>\n                            </YAxis>\n                            <Tooltip/>\n                            <Line connectNulls={true} type='monotone' dataKey='revenue' stroke='#8884d8' fill='#8884d8' />\n                            </LineChart> \n                        </div>\n                        <div className=\"TableStats\">\n                            <MDBDataTable\n                                striped\n                                bordered\n                                small\n                                data={data}\n                            />\n                        </div>\n                    </div>\n                    </div>\n                 : \n                <div>\n                    Daily Stats Call Limit Reached\n                </div>}\n            </div>\n        );\n    }\n}\n\nexport default DailyStats;"]},"metadata":{},"sourceType":"module"}